Webarok is a web based remote control for Amarok.

0. Prerequisites
================

You need to have installed
1. Amarok 2 (tested with 2.1 and 2.2 beta)
2. Python (tested with version 2.6)
3. Python dbus bindings (package python-dbus on kubuntu)
4. A webbrowser (tested with firefox und khtml-part based browsers)


1. Installation
===============

Get the sourcecode and place it somewhere on the same computer as 
Amarok is running


2. Configuration
================

Webarok can show album art. For this it is neccessary to have access to 
the folder on the filesystem, where Amarok stores the album art.
Normally this folder is:
/home/<<$USERNAME>>/.kde/share/apps/amarok/albumcovers/

To restrict the access of webarok to this folder, open the file 
Configuration/Configuration.py and edit the line

self.artfolder = "/home/***PLEASE CHANGE THIS***/.kde/share/apps/amarok/albumcovers/"

to match the folder with your setup.

If you set up your Amarok configuration in a way that Amarok stores album art within the music
files directory, set self.artfolder to the root folder of your library, like:

self.artfolder = "/media/MyExternalDrive/Music/"

MySql-Collection-Search:
Amarok must use a external MySql Database
Edit:
Configuration/Configuration.py:
Change self.mySqlOpts to match your settings

If you won't use MySql you may set self.useCollection to False to avoid MySql-Errors.

3. Starting Webarok
===================

Make sure Amarok is already running. Open a terminal and enter:

cd <<Path/to/Webarok>>
python webarok.py

If everything is OK, there should be some output like:

(init MyDbus class)
Starting webarok server


4. Using Webarok
================

Open a browser and connect to the computer where Webarok is running on port 8085. 
If you started the browser on the same box as you installed Webarok, then enter:

http://localhost:8085/

Now Webaroks interface should be visible and you are able to control Amarok via 
this interface.  Have fun with it now :)


4.1 Using themes
================

To load a specific theme, enter the URL
http://<<$YOUR_IP>>:8085/index?theme=<<$THEME_NAME>>

Up to now, 3 themes exist:
http://<<$YOUR_IP>>:8085/index?theme=default
--> the default theme

http://<<$YOUR_IP>>:8085/index?theme=transparent
--> same as default, but with transparent background, looks nice in webbrowser plasmoids

http://<<$YOUR_IP>>:8085/index?theme=netbook
--> uses a tab view to separate current song and controls, playlist and settings,
--> uses also a smaller font to save screen estate

http://<<$YOUR_IP>>:8085/index?theme=phone
--> uses a tab view to separate current song and controls, playlist, lyrics, collection search and settings,
--> uses also a smaller font to save screen estate
--> UI similar to KDE4
--> see explore_phone_theme.jpg for more details

5. Notes
========

Using the "play track from playlist" functionality is some kind of hack, since amarok
does not support something like this directly via the dbus interface. So Webarok goes
the stupid way and just triggers "next song" or "previous song" as often as necessary
to get the requested song. It may happen the the songs between get played for a second
and this may sound a little bit awkward. Normally playing the songs between for such
a short time should not trigger any events like scrobbling the song to last.fm.
 

6. Troubleshooting
==================

Visit http://sourceforge.net/projects/webarok/ and check forums or mailing lists


7. CREDITS
===========

Patches:
khaytsus (default/transparent theme)

Libraries:
Prototype Javascript library: http://www.prototypejs.org
Livepipe Javascript widget library: http://livepipe.net
Scriptaculous Javascript effects library: http://script.aculo.us

Icons:
Dark Glass icon set: http://kde-look.org/content/show.php/DarkGlass_Reworked?content=67902

Progressbar pictures:
Relay: http://ecosmear.com/relay

Python:
http://www.python.org

Amarok:
http://amarok.kde.org

And of course all the basic stuff:
http://www.kde.org
http:/qt.nokia.com
http://www.linux.org